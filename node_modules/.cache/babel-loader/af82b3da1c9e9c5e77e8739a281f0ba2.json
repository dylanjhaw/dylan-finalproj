{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dylan\\\\web102_unit7lab\\\\client\\\\src\\\\pages\\\\PostView.js\",\n    _s = $RefreshSig$();\n\n// PostView.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { supabase } from '../client.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostView = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [count, setCount] = useState(0);\n  const [comments, setComments] = useState([]); // new state for comments\n\n  const [newComment, setNewComment] = useState(''); // new state for the new comment\n\n  useEffect(() => {\n    console.log('useEffect is being executed');\n    fetchPost();\n    fetchComments();\n  }, [id]);\n\n  const fetchPost = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('Posts').select('title, author, description, created_at, upvote').eq('id', id);\n    console.log('data:', data);\n    console.log('error:', error);\n\n    if (error) {\n      console.error('Error fetching post: ', error);\n    } else {\n      console.log('Setting post and loading state');\n      setPost(data[0]);\n      setCount(data[0].upvote);\n      setLoading(false);\n    }\n  };\n\n  const fetchComments = async () => {\n    const {\n      data\n    } = await supabase.from('Comments').select('*').eq('post_id', id).order('created_at', {\n      ascending: false\n    });\n    setComments(data);\n  };\n\n  const handleNewCommentChange = e => {\n    setNewComment(e.target.value);\n  };\n\n  const handleNewCommentSubmit = async e => {\n    e.preventDefault();\n    const {\n      error\n    } = await supabase.from('Comments').insert([{\n      post_id: id,\n      content: newComment,\n      author: 'Your Name',\n      created_at: new Date()\n    }]);\n\n    if (error) {\n      console.log('error', error);\n    } else {\n      setNewComment('');\n      fetchComments(); // fetch the updated comments after adding a new comment\n    }\n  }; // const handleUpvote = async () => {\n  //     const { data, error } = await supabase\n  //         .from('Posts')\n  //         .update({ upvote: post.upvote + 1 })\n  //         .eq('id', post.id);\n  //     if (error) {\n  //         console.log('error', error);\n  //     } else {\n  //         setPost({ ...post, upvote: post.upvote + 1 });\n  //     }\n  // };\n\n\n  const handleUpvote = async () => {\n    const {\n      error\n    } = await supabase.from('Posts').update({\n      upvote: post.upvote + 1\n    }).eq('id', post.id);\n\n    if (error) {\n      console.log('error', error);\n    } else {\n      const {\n        data,\n        error\n      } = await supabase.from('Posts').select('*').eq('id', post.id).single();\n\n      if (error) {\n        console.log('error', error);\n      } else {\n        setPost(data); // update the post state with the updated post\n      }\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 16\n    }, this);\n  } // return (\n  //     <div>\n  //         {post && (\n  //             <>\n  //                 <h2>{post.title}</h2>\n  //                 <h3>{\"by \" + post.author}</h3>\n  //                 <p>{post.description}</p>\n  //                 {/* <p>{\"Posted: \" + post.created_at}</p> */}\n  //                 <p>{\"Posted: \" + new Date(post.created_at).toLocaleString()}</p>\n  //                 <button onClick={handleUpvote}>Upvote</button>\n  //                 <p>{\"Upvotes: \" + post.upvote}</p>\n  //             </>\n  //         )}\n  //     </div>\n  // );\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: post && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"by \" + post.author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Posted: \" + new Date(post.created_at).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpvote,\n        children: \"Upvote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upvotes: \" + post.upvote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleNewCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newComment,\n          onChange: handleNewCommentChange,\n          placeholder: \"New comment\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"by \" + comment.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Posted: \" + new Date(comment.created_at).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostView, \"UfjNGrC/msScZsDfWKO+3Eq9Iro=\", false, function () {\n  return [useParams];\n});\n\n_c = PostView;\nexport default PostView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostView\");","map":{"version":3,"names":["React","useEffect","useState","useParams","supabase","PostView","id","post","setPost","loading","setLoading","count","setCount","comments","setComments","newComment","setNewComment","console","log","fetchPost","fetchComments","data","error","from","select","eq","upvote","order","ascending","handleNewCommentChange","e","target","value","handleNewCommentSubmit","preventDefault","insert","post_id","content","author","created_at","Date","handleUpvote","update","single","title","description","toLocaleString","map","comment"],"sources":["C:/Users/dylan/web102_unit7lab/client/src/pages/PostView.js"],"sourcesContent":["// PostView.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { supabase } from '../client.js';\r\n\r\nconst PostView = () => {\r\n    const { id } = useParams();\r\n    const [post, setPost] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [count, setCount] = useState(0);\r\n    const [comments, setComments] = useState([]); // new state for comments\r\n    const [newComment, setNewComment] = useState(''); // new state for the new comment\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect is being executed');\r\n        fetchPost();\r\n        fetchComments();\r\n    }, [id]);\r\n    \r\n    const fetchPost = async () => {\r\n        const { data, error } = await supabase\r\n            .from('Posts')\r\n            .select('title, author, description, created_at, upvote')\r\n            .eq('id', id);\r\n        console.log('data:', data);\r\n        console.log('error:', error);\r\n        if (error) {\r\n            console.error('Error fetching post: ', error);\r\n        } else {\r\n            console.log('Setting post and loading state');\r\n            setPost(data[0]);\r\n            setCount(data[0].upvote);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        const { data } = await supabase\r\n            .from('Comments')\r\n            .select('*')\r\n            .eq('post_id', id)\r\n            .order('created_at', { ascending: false });\r\n\r\n        setComments(data);\r\n    }\r\n\r\n    const handleNewCommentChange = (e) => {\r\n        setNewComment(e.target.value);\r\n    }\r\n\r\n    const handleNewCommentSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const { error } = await supabase\r\n            .from('Comments')\r\n            .insert([{ post_id: id, content: newComment, author: 'Your Name', created_at: new Date() }]);\r\n\r\n        if (error) {\r\n            console.log('error', error);\r\n        } else {\r\n            setNewComment('');\r\n            fetchComments(); // fetch the updated comments after adding a new comment\r\n        }\r\n    }\r\n\r\n    // const handleUpvote = async () => {\r\n    //     const { data, error } = await supabase\r\n    //         .from('Posts')\r\n    //         .update({ upvote: post.upvote + 1 })\r\n    //         .eq('id', post.id);\r\n    \r\n    //     if (error) {\r\n    //         console.log('error', error);\r\n    //     } else {\r\n    //         setPost({ ...post, upvote: post.upvote + 1 });\r\n    //     }\r\n    // };\r\n\r\n    const handleUpvote = async () => {\r\n        const { error } = await supabase\r\n            .from('Posts')\r\n            .update({ upvote: post.upvote + 1 })\r\n            .eq('id', post.id);\r\n    \r\n        if (error) {\r\n            console.log('error', error);\r\n        } else {\r\n            const { data, error } = await supabase\r\n                .from('Posts')\r\n                .select('*')\r\n                .eq('id', post.id)\r\n                .single();\r\n    \r\n            if (error) {\r\n                console.log('error', error);\r\n            } else {\r\n                setPost(data); // update the post state with the updated post\r\n            }\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    // return (\r\n    //     <div>\r\n    //         {post && (\r\n    //             <>\r\n    //                 <h2>{post.title}</h2>\r\n    //                 <h3>{\"by \" + post.author}</h3>\r\n    //                 <p>{post.description}</p>\r\n    //                 {/* <p>{\"Posted: \" + post.created_at}</p> */}\r\n    //                 <p>{\"Posted: \" + new Date(post.created_at).toLocaleString()}</p>\r\n    //                 <button onClick={handleUpvote}>Upvote</button>\r\n    //                 <p>{\"Upvotes: \" + post.upvote}</p>\r\n                    \r\n    //             </>\r\n                \r\n    //         )}\r\n    //     </div>\r\n    // );\r\n\r\n    return (\r\n        <div>\r\n            {post && (\r\n                <>\r\n                    <h2>{post.title}</h2>\r\n                    <h3>{\"by \" + post.author}</h3>\r\n                    <p>{post.description}</p>\r\n                    <p>{\"Posted: \" + new Date(post.created_at).toLocaleString()}</p>\r\n                    <button onClick={handleUpvote}>Upvote</button>\r\n                    <p>{\"Upvotes: \" + post.upvote}</p>\r\n    \r\n                    <form onSubmit={handleNewCommentSubmit}>\r\n                        <input type=\"text\" value={newComment} onChange={handleNewCommentChange} placeholder=\"New comment\" required />\r\n                        <button type=\"submit\">Submit</button>\r\n                    </form>\r\n    \r\n                    {comments.map((comment) => (\r\n                        <div key={comment.id}>\r\n                            <p>{comment.content}</p>\r\n                            <p>{\"by \" + comment.author}</p>\r\n                            <p>{\"Posted: \" + new Date(comment.created_at).toLocaleString()}</p>\r\n                        </div>\r\n                    ))}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default PostView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}