{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dylan\\\\web102_unit7lab\\\\client\\\\src\\\\pages\\\\PostView.js\",\n    _s = $RefreshSig$();\n\n// PostView.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { supabase } from '../client.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostView = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    console.log('useEffect is being executed');\n    fetchPost();\n  }, [id]);\n\n  const fetchPost = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('Posts').select('title, author, description, created_at, upvote').eq('id', id);\n    console.log('data:', data);\n    console.log('error:', error);\n\n    if (error) {\n      console.error('Error fetching post: ', error);\n    } else {\n      console.log('Setting post and loading state');\n      setPost(data[0]);\n      setCount(data[0].upvote);\n      setLoading(false);\n    }\n  };\n\n  const handleUpvote = async () => {\n    const {\n      error\n    } = await supabase.from('Posts').update({\n      upvote: post.upvote + 1\n    }).eq('id', post.id);\n\n    if (error) {\n      console.log('error', error);\n    } else {\n      setPost({ ...post,\n        upvote: post.upvote + 1\n      });\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: post && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"by \" + post.author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Posted: \" + new Date(post.created_at).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upvotes: \" + post.upvote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpvote,\n        children: \"Upvote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostView, \"YClYpwy1ybWdCpl4JhR8MJzzsJY=\", false, function () {\n  return [useParams];\n});\n\n_c = PostView;\nexport default PostView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostView\");","map":{"version":3,"names":["React","useEffect","useState","useParams","supabase","PostView","id","post","setPost","loading","setLoading","count","setCount","console","log","fetchPost","data","error","from","select","eq","upvote","handleUpvote","update","title","author","description","Date","created_at","toLocaleString"],"sources":["C:/Users/dylan/web102_unit7lab/client/src/pages/PostView.js"],"sourcesContent":["// PostView.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { supabase } from '../client.js';\r\n\r\nconst PostView = () => {\r\n    const { id } = useParams();\r\n    const [post, setPost] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect is being executed');\r\n        fetchPost();\r\n    }, [id]);\r\n    \r\n    const fetchPost = async () => {\r\n        const { data, error } = await supabase\r\n            .from('Posts')\r\n            .select('title, author, description, created_at, upvote')\r\n            .eq('id', id);\r\n        console.log('data:', data);\r\n        console.log('error:', error);\r\n        if (error) {\r\n            console.error('Error fetching post: ', error);\r\n        } else {\r\n            console.log('Setting post and loading state');\r\n            setPost(data[0]);\r\n            setCount(data[0].upvote);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleUpvote = async () => {\r\n        const { error } = await supabase\r\n            .from('Posts')\r\n            .update({ upvote: post.upvote + 1 })\r\n            .eq('id', post.id);\r\n    \r\n        if (error) {\r\n            console.log('error', error);\r\n        } else {\r\n            setPost({ ...post, upvote: post.upvote + 1 });\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {post && (\r\n                <>\r\n                    <h2>{post.title}</h2>\r\n                    <h3>{\"by \" + post.author}</h3>\r\n                    <p>{post.description}</p>\r\n                    {/* <p>{\"Posted: \" + post.created_at}</p> */}\r\n                    <p>{\"Posted: \" + new Date(post.created_at).toLocaleString()}</p>\r\n                    <p>{\"Upvotes: \" + post.upvote}</p>\r\n                    <button onClick={handleUpvote}>Upvote</button>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostView;"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,cAAzB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACnB,MAAM;IAAEC;EAAF,IAASH,SAAS,EAAxB;EACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;EAEAD,SAAS,CAAC,MAAM;IACZY,OAAO,CAACC,GAAR,CAAY,6BAAZ;IACAC,SAAS;EACZ,CAHQ,EAGN,CAACT,EAAD,CAHM,CAAT;;EAKA,MAAMS,SAAS,GAAG,YAAY;IAC1B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkB,MAAMb,QAAQ,CACjCc,IADyB,CACpB,OADoB,EAEzBC,MAFyB,CAElB,gDAFkB,EAGzBC,EAHyB,CAGtB,IAHsB,EAGhBd,EAHgB,CAA9B;IAIAO,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,IAArB;IACAH,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBG,KAAtB;;IACA,IAAIA,KAAJ,EAAW;MACPJ,OAAO,CAACI,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;IACH,CAFD,MAEO;MACHJ,OAAO,CAACC,GAAR,CAAY,gCAAZ;MACAN,OAAO,CAACQ,IAAI,CAAC,CAAD,CAAL,CAAP;MACAJ,QAAQ,CAACI,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAT,CAAR;MACAX,UAAU,CAAC,KAAD,CAAV;IACH;EACJ,CAfD;;EAiBA,MAAMY,YAAY,GAAG,YAAY;IAC7B,MAAM;MAAEL;IAAF,IAAY,MAAMb,QAAQ,CAC3Bc,IADmB,CACd,OADc,EAEnBK,MAFmB,CAEZ;MAAEF,MAAM,EAAEd,IAAI,CAACc,MAAL,GAAc;IAAxB,CAFY,EAGnBD,EAHmB,CAGhB,IAHgB,EAGVb,IAAI,CAACD,EAHK,CAAxB;;IAKA,IAAIW,KAAJ,EAAW;MACPJ,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,KAArB;IACH,CAFD,MAEO;MACHT,OAAO,CAAC,EAAE,GAAGD,IAAL;QAAWc,MAAM,EAAEd,IAAI,CAACc,MAAL,GAAc;MAAjC,CAAD,CAAP;IACH;EACJ,CAXD;;EAaA,IAAIZ,OAAJ,EAAa;IACT,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;;EAED,oBACI;IAAA,UACKF,IAAI,iBACD;MAAA,wBACI;QAAA,UAAKA,IAAI,CAACiB;MAAV;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA,UAAK,QAAQjB,IAAI,CAACkB;MAAlB;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA,UAAIlB,IAAI,CAACmB;MAAT;QAAA;QAAA;QAAA;MAAA,QAHJ,eAKI;QAAA,UAAI,aAAa,IAAIC,IAAJ,CAASpB,IAAI,CAACqB,UAAd,EAA0BC,cAA1B;MAAjB;QAAA;QAAA;QAAA;MAAA,QALJ,eAMI;QAAA,UAAI,cAActB,IAAI,CAACc;MAAvB;QAAA;QAAA;QAAA;MAAA,QANJ,eAOI;QAAQ,OAAO,EAAEC,YAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPJ;IAAA;EAFR;IAAA;IAAA;IAAA;EAAA,QADJ;AAeH,CA5DD;;GAAMjB,Q;UACaF,S;;;KADbE,Q;AA8DN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}