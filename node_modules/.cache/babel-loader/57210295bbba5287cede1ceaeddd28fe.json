{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dylan\\\\web102_unit7lab\\\\client\\\\src\\\\pages\\\\PostView.js\",\n    _s = $RefreshSig$();\n\n// PostView.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { supabase } from '../client.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostView = () => {\n  _s();\n\n  const {\n    id\n  } = useParams(); //const [post, setPost] = useState(null);\n\n  const [loading, setLoading] = useState(true);\n  const [count, setCount] = useState(0); // const [comments, setComments] = useState([]); // new state for comments\n  // const [newComment, setNewComment] = useState(''); // new state for the new comment\n\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [newCommentAuthor, setNewCommentAuthor] = useState(''); // new state for the new comment author\n\n  useEffect(() => {\n    console.log('useEffect is being executed');\n    fetchPost();\n    fetchComments();\n  }, [id]);\n\n  const fetchPost = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('Posts').select('title, author, description, created_at, upvote').eq('id', id);\n    console.log('data:', data);\n    console.log('error:', error);\n\n    if (error) {\n      console.error('Error fetching post: ', error);\n    } else {\n      console.log('Setting post and loading state');\n      setPost(data[0]);\n      setCount(data[0].upvote);\n      setLoading(false);\n    }\n  };\n\n  const fetchComments = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('Comments').select('*').eq('post_id', id).order('created_at', {\n      ascending: false\n    });\n\n    if (error) {\n      console.log('Error fetching comments:', error);\n    } else {\n      console.log('Fetched comments:', data); // log the fetched comments\n\n      setComments(data);\n    }\n  };\n\n  const handleNewCommentChange = e => {\n    setNewComment(e.target.value);\n  };\n\n  const handleNewCommentAuthorChange = e => {\n    setNewCommentAuthor(e.target.value); // new function to handle the new comment author change\n  };\n\n  const handleNewCommentSubmit = async e => {\n    e.preventDefault();\n    console.log('Submitting new comment:', newComment, 'by', newCommentAuthor); // log the new comment and author\n\n    const {\n      data,\n      error\n    } = await supabase.from('Comments').insert([{\n      post_id: id,\n      content: newComment,\n      author: newCommentAuthor,\n      created_at: new Date()\n    }]);\n\n    if (error) {\n      console.log('Error submitting new comment:', error);\n    } else {\n      console.log('New comment submitted successfully:', data); // log the returned data\n\n      setNewComment('');\n      setNewCommentAuthor('');\n      fetchComments();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: post && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"by \" + post.author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Posted: \" + new Date(post.created_at).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upvotes: \" + post.upvote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleNewCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newCommentAuthor,\n          onChange: handleNewCommentAuthorChange,\n          placeholder: \"Your name\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newComment,\n          onChange: handleNewCommentChange,\n          placeholder: \"New comment\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"by \" + comment.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Posted: \" + new Date(comment.created_at).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostView, \"qjunxLV3UmvqZcz3QBRhEZogFpY=\", false, function () {\n  return [useParams];\n});\n\n_c = PostView;\nexport default PostView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostView\");","map":{"version":3,"names":["React","useEffect","useState","useParams","supabase","PostView","id","loading","setLoading","count","setCount","post","setPost","comments","setComments","newComment","setNewComment","newCommentAuthor","setNewCommentAuthor","console","log","fetchPost","fetchComments","data","error","from","select","eq","upvote","order","ascending","handleNewCommentChange","e","target","value","handleNewCommentAuthorChange","handleNewCommentSubmit","preventDefault","insert","post_id","content","author","created_at","Date","title","description","toLocaleString","map","comment"],"sources":["C:/Users/dylan/web102_unit7lab/client/src/pages/PostView.js"],"sourcesContent":["// PostView.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { supabase } from '../client.js';\r\n\r\nconst PostView = () => {\r\n     const { id } = useParams();\r\n     //const [post, setPost] = useState(null);\r\n     const [loading, setLoading] = useState(true);\r\n     const [count, setCount] = useState(0);\r\n    // const [comments, setComments] = useState([]); // new state for comments\r\n    // const [newComment, setNewComment] = useState(''); // new state for the new comment\r\n    const [post, setPost] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [newCommentAuthor, setNewCommentAuthor] = useState(''); // new state for the new comment author\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect is being executed');\r\n        fetchPost();\r\n        fetchComments();\r\n    }, [id]);\r\n    \r\n    const fetchPost = async () => {\r\n        const { data, error } = await supabase\r\n            .from('Posts')\r\n            .select('title, author, description, created_at, upvote')\r\n            .eq('id', id);\r\n        console.log('data:', data);\r\n        console.log('error:', error);\r\n        if (error) {\r\n            console.error('Error fetching post: ', error);\r\n        } else {\r\n            console.log('Setting post and loading state');\r\n            setPost(data[0]);\r\n            setCount(data[0].upvote);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        const { data, error } = await supabase\r\n            .from('Comments')\r\n            .select('*')\r\n            .eq('post_id', id)\r\n            .order('created_at', { ascending: false });\r\n    \r\n        if (error) {\r\n            console.log('Error fetching comments:', error);\r\n        } else {\r\n            console.log('Fetched comments:', data); // log the fetched comments\r\n            setComments(data);\r\n        }\r\n    }\r\n\r\n    const handleNewCommentChange = (e) => {\r\n        setNewComment(e.target.value);\r\n    }\r\n\r\n    const handleNewCommentAuthorChange = (e) => {\r\n        setNewCommentAuthor(e.target.value); // new function to handle the new comment author change\r\n    }\r\n\r\n    const handleNewCommentSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        console.log('Submitting new comment:', newComment, 'by', newCommentAuthor); // log the new comment and author\r\n    \r\n        const { data, error } = await supabase\r\n            .from('Comments')\r\n            .insert([{ post_id: id, content: newComment, author: newCommentAuthor, created_at: new Date() }]);\r\n    \r\n        if (error) {\r\n            console.log('Error submitting new comment:', error);\r\n        } else {\r\n            console.log('New comment submitted successfully:', data); // log the returned data\r\n            setNewComment('');\r\n            setNewCommentAuthor('');\r\n            fetchComments();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {post && (\r\n                <>\r\n                    <h2>{post.title}</h2>\r\n                    <h3>{\"by \" + post.author}</h3>\r\n                    <p>{post.description}</p>\r\n                    <p>{\"Posted: \" + new Date(post.created_at).toLocaleString()}</p>\r\n                    \r\n                    <p>{\"Upvotes: \" + post.upvote}</p>\r\n    \r\n                    <form onSubmit={handleNewCommentSubmit}>\r\n                <input type=\"text\" value={newCommentAuthor} onChange={handleNewCommentAuthorChange} placeholder=\"Your name\" required /> {/* new input field for the new comment author */}\r\n                <input type=\"text\" value={newComment} onChange={handleNewCommentChange} placeholder=\"New comment\" required />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n    \r\n                    {comments.map((comment) => (\r\n                        <div key={comment.id}>\r\n                            <p>{comment.content}</p>\r\n                            <p>{\"by \" + comment.author}</p>\r\n                            <p>{\"Posted: \" + new Date(comment.created_at).toLocaleString()}</p>\r\n                        </div>\r\n                    ))}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default PostView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}